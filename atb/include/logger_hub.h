#pragma once

// -----------------------------------------------------------------------------
// std
// -----------------------------------------------------------------------------
#include <vector>

// -----------------------------------------------------------------------------
// logging.
// -----------------------------------------------------------------------------
#include "spdlog/spdlog.h"
#include "atb.common/logger.h"

// -----------------------------------------------------------------------------
// boost
// -----------------------------------------------------------------------------
#include <boost/thread.hpp>

namespace atb {

    const short max_log_lines = 16;
    const int log_line_length = atb::common::max_log_line_length;

    // -------------------------------------------------------------------------
    // Central logger hub.
    // Switch for all log lines.
    // -------------------------------------------------------------------------
    class logger_hub {

    private:
        boost::mutex lock;

        // ---------------------------------------------------------------------
        // Actual logger.
        // ---------------------------------------------------------------------
        std::shared_ptr<spdlog::logger> console;

        // ---------------------------------------------------------------------
        // Keeps track lines that are free for use.
        // ---------------------------------------------------------------------
        std::vector<void*> free_log_lines;

    public:
        logger_hub();

        ~logger_hub();

        // ---------------------------------------------------------------------
        // Debug callback.
        // ---------------------------------------------------------------------
        void debug(const char* const message);

        // ---------------------------------------------------------------------
        // Info callback.
        // ---------------------------------------------------------------------
        void info(const char* const message);

        // ---------------------------------------------------------------------
        // Warning callback.
        // ---------------------------------------------------------------------
        void warn(const char* const message);

        // ---------------------------------------------------------------------
        // Error callback.
        // ---------------------------------------------------------------------
        void error(const char* const message);

        // ---------------------------------------------------------------------
        // Fatal callback.
        // ---------------------------------------------------------------------
        void fatal(const char* const message);

        // ---------------------------------------------------------------------
        // Reserves log line.
        // ---------------------------------------------------------------------
        char* malloc_empty_log_line();

        // ---------------------------------------------------------------------
        // Returns log line.
        // ---------------------------------------------------------------------
        void free_log_line(char* line);
    };
}